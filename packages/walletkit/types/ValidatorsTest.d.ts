/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from 'web3/eth/contract'
import { TransactionObject, BlockType } from 'web3/eth/types'
import { Callback, EventLog } from 'web3/types'
import { EventEmitter } from 'events'
import { Provider } from 'web3/providers'

export class ValidatorsTest extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions)
  _address: string
  options: contractOptions
  methods: {
    getMembershipInLastEpoch(account: string): TransactionObject<string>

    validatorAddressFromCurrentSet(index: number | string): TransactionObject<string>

    getValidator(
      account: string
    ): TransactionObject<{
      ecdsaPublicKey: string[]
      blsPublicKey: string[]
      affiliation: string
      score: string
      signer: string
      0: string[]
      1: string[]
      2: string
      3: string
      4: string
    }>

    getValidatorScoreParameters(): TransactionObject<{
      0: string
      1: string
    }>

    getMembershipHistory(
      account: string
    ): TransactionObject<{
      0: string[]
      1: string[]
      2: string
    }>

    getGroupNumMembers(account: string): TransactionObject<string>

    getMembershipInLastEpochFromSigner(signer: string): TransactionObject<string>

    isValidatorGroup(account: string): TransactionObject<boolean>

    getGroupLockedGoldRequirements(): TransactionObject<{
      0: string
      1: string
    }>

    getGroupsNumMembers(accounts: string[]): TransactionObject<string[]>

    getTopGroupValidators(account: string, n: number | string): TransactionObject<string[]>

    getValidatorGroup(
      account: string
    ): TransactionObject<{
      0: string[]
      1: string
      2: string[]
    }>

    getValidatorBlsPublicKeyFromSigner(signer: string): TransactionObject<string[]>

    validatorLockedGoldRequirements(): TransactionObject<{
      value: string
      duration: string
      0: string
      1: string
    }>

    getValidatorLockedGoldRequirements(): TransactionObject<{
      0: string
      1: string
    }>

    meetsAccountLockedGoldRequirements(account: string): TransactionObject<boolean>

    groupLockedGoldRequirements(): TransactionObject<{
      value: string
      duration: string
      0: string
      1: string
    }>

    getAccountLockedGoldRequirement(account: string): TransactionObject<string>

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string
      1: string
    }>

    isValidator(account: string): TransactionObject<boolean>

    removeMember(validator: string): TransactionObject<boolean>

    checkProofOfPossession(
      sender: string,
      blsKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>

    addFirstMember(validator: string, lesser: string, greater: string): TransactionObject<boolean>

    updateEcdsaPublicKey(
      account: string,
      signer: string,
      ecdsaPublicKey: (string | number[])[]
    ): TransactionObject<boolean>

    setGroupLockedGoldRequirements(
      value: number | string,
      duration: number | string
    ): TransactionObject<boolean>

    deregisterValidatorGroup(index: number | string): TransactionObject<boolean>

    renounceOwnership(): TransactionObject<void>

    setValidatorLockedGoldRequirements(
      value: number | string,
      duration: number | string
    ): TransactionObject<boolean>

    deregisterValidator(index: number | string): TransactionObject<boolean>

    reorderMember(
      validator: string,
      lesserMember: string,
      greaterMember: string
    ): TransactionObject<boolean>

    updateCommission(commission: number | string): TransactionObject<boolean>

    setRegistry(registryAddress: string): TransactionObject<void>

    affiliate(group: string): TransactionObject<boolean>

    updateBlsPublicKey(
      blsPublicKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>

    addMember(validator: string): TransactionObject<boolean>

    setValidatorScoreParameters(
      exponent: number | string,
      adjustmentSpeed: number | string
    ): TransactionObject<boolean>

    initialize(
      registryAddress: string,
      groupRequirementValue: number | string,
      groupRequirementDuration: number | string,
      validatorRequirementValue: number | string,
      validatorRequirementDuration: number | string,
      validatorScoreExponent: number | string,
      validatorScoreAdjustmentSpeed: number | string,
      _membershipHistoryLength: number | string,
      _maxGroupSize: number | string
    ): TransactionObject<void>

    setMaxGroupSize(size: number | string): TransactionObject<boolean>

    registerValidator(
      ecdsaPublicKey: (string | number[])[],
      blsPublicKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>

    registerValidatorGroup(commission: number | string): TransactionObject<boolean>

    setMembershipHistoryLength(length: number | string): TransactionObject<boolean>

    transferOwnership(newOwner: string): TransactionObject<void>

    deaffiliate(): TransactionObject<boolean>

    updateValidatorScoreFromSigner(signer: string, uptime: number | string): TransactionObject<void>

    distributeEpochPaymentsFromSigner(
      signer: string,
      maxPayment: number | string
    ): TransactionObject<string>

    initialized(): TransactionObject<boolean>
    getRegisteredValidatorGroups(): TransactionObject<string[]>
    getMaxGroupSize(): TransactionObject<string>
    membershipHistoryLength(): TransactionObject<string>
    getNumRegisteredValidators(): TransactionObject<string>
    maxGroupSize(): TransactionObject<string>
    registry(): TransactionObject<string>
    numberValidatorsInCurrentSet(): TransactionObject<string>
    owner(): TransactionObject<string>
    isOwner(): TransactionObject<boolean>
    getEpochNumber(): TransactionObject<string>
    getRegisteredValidatorSigners(): TransactionObject<string[]>
    getRegisteredValidators(): TransactionObject<string[]>
    getEpochSize(): TransactionObject<string>
  }
  deploy(options: { data: string; arguments: any[] }): TransactionObject<Contract>
  events: {
    MaxGroupSizeSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorEpochPaymentSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorScoreParametersSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    GroupLockedGoldRequirementsSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorLockedGoldRequirementsSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    MembershipHistoryLengthSet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorRegistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorDeregistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorAffiliated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorDeaffiliated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorEcdsaPublicKeyUpdated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorBlsPublicKeyUpdated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupRegistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupDeregistered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupMemberAdded(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupMemberRemoved(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupMemberReordered(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    ValidatorGroupCommissionUpdated(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    RegistrySet(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    OwnershipTransferred(
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ): EventEmitter

    allEvents: (
      options?: {
        filter?: object
        fromBlock?: BlockType
        topics?: (null | string)[]
      },
      cb?: Callback<EventLog>
    ) => EventEmitter
  }
  getPastEvents(
    event: string,
    options?: {
      filter?: object
      fromBlock?: BlockType
      toBlock?: BlockType
      topics?: (null | string)[]
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>
  setProvider(provider: Provider): void
  clone(): ValidatorsTest
}

/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class EpochRewards extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    validatorAddressFromCurrentSet(
      index: number | string
    ): TransactionObject<string>;

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    getTargetVotingYieldParameters(): TransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    getRewardsMultiplierParameters(): TransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    calculateTargetEpochPaymentAndRewards(): TransactionObject<{
      0: string;
      1: string;
    }>;

    checkProofOfPossession(
      sender: string,
      blsKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>;

    renounceOwnership(): TransactionObject<void>;

    setRegistry(registryAddress: string): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    initialize(
      registryAddress: string,
      targetVotingYieldInitial: number | string,
      targetVotingYieldMax: number | string,
      targetVotingYieldAdjustmentFactor: number | string,
      rewardsMultiplierMax: number | string,
      rewardsMultiplierUnderspendAdjustmentFactor: number | string,
      rewardsMultiplierOverspendAdjustmentFactor: number | string,
      _targetVotingGoldFraction: number | string,
      _targetValidatorEpochPayment: number | string
    ): TransactionObject<void>;

    setTargetVotingGoldFraction(
      value: number | string
    ): TransactionObject<boolean>;

    setTargetValidatorEpochPayment(
      value: number | string
    ): TransactionObject<boolean>;

    setRewardsMultiplierParameters(
      max: number | string,
      underspendAdjustmentFactor: number | string,
      overspendAdjustmentFactor: number | string
    ): TransactionObject<boolean>;

    setTargetVotingYieldParameters(
      max: number | string,
      adjustmentFactor: number | string
    ): TransactionObject<boolean>;

    updateTargetVotingYield(): TransactionObject<void>;

    initialized(): TransactionObject<boolean>;
    startTime(): TransactionObject<string>;
    registry(): TransactionObject<string>;
    numberValidatorsInCurrentSet(): TransactionObject<string>;
    owner(): TransactionObject<string>;
    isOwner(): TransactionObject<boolean>;
    getEpochNumber(): TransactionObject<string>;
    getEpochSize(): TransactionObject<string>;
    targetValidatorEpochPayment(): TransactionObject<string>;
    getTargetVotingGoldFraction(): TransactionObject<string>;
    getTargetGoldTotalSupply(): TransactionObject<string>;
    getRewardsMultiplier(): TransactionObject<string>;
    getTargetEpochRewards(): TransactionObject<string>;
    getTargetTotalEpochPaymentsInGold(): TransactionObject<string>;
    getVotingGoldFraction(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    TargetVotingGoldFractionSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TargetValidatorEpochPaymentSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    TargetVotingYieldParametersSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    RewardsMultiplierParametersSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    RegistrySet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): EpochRewards;
}

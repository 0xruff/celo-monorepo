/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import Contract, { CustomOptions, contractOptions } from "web3/eth/contract";
import { TransactionObject, BlockType } from "web3/eth/types";
import { Callback, EventLog } from "web3/types";
import { EventEmitter } from "events";
import { Provider } from "web3/providers";

export class ElectionTest extends Contract {
  constructor(jsonInterface: any[], address?: string, options?: CustomOptions);
  _address: string;
  options: contractOptions;
  methods: {
    validatorAddressFromCurrentSet(
      index: number | string
    ): TransactionObject<string>;

    hasActivatablePendingVotes(
      account: string,
      group: string
    ): TransactionObject<boolean>;

    getNumVotesReceivable(group: string): TransactionObject<string>;

    getTotalVotesForGroupByAccount(
      group: string,
      account: string
    ): TransactionObject<string>;

    getGroupsVotedForByAccount(account: string): TransactionObject<(string)[]>;

    getTotalVotesByAccount(account: string): TransactionObject<string>;

    getTotalVotesForEligibleValidatorGroups(): TransactionObject<{
      groups: (string)[];
      values: (string)[];
      0: (string)[];
      1: (string)[];
    }>;

    getGroupEligibility(group: string): TransactionObject<boolean>;

    getPendingVotesForGroupByAccount(
      group: string,
      account: string
    ): TransactionObject<string>;

    getGroupEpochRewards(
      group: string,
      totalEpochRewards: number | string
    ): TransactionObject<string>;

    getActiveVotesForGroupByAccount(
      group: string,
      account: string
    ): TransactionObject<string>;

    getTotalVotesForGroup(group: string): TransactionObject<string>;

    canReceiveVotes(
      group: string,
      value: number | string
    ): TransactionObject<boolean>;

    fractionMulExp(
      aNumerator: number | string,
      aDenominator: number | string,
      bNumerator: number | string,
      bDenominator: number | string,
      exponent: number | string,
      _decimals: number | string
    ): TransactionObject<{
      0: string;
      1: string;
    }>;

    electableValidators(): TransactionObject<{
      min: string;
      max: string;
      0: string;
      1: string;
    }>;

    getElectableValidators(): TransactionObject<{
      0: string;
      1: string;
    }>;

    activate(group: string): TransactionObject<boolean>;

    checkProofOfPossession(
      sender: string,
      blsKey: (string | number[])[],
      blsPop: (string | number[])[]
    ): TransactionObject<boolean>;

    setMaxNumGroupsVotedFor(
      _maxNumGroupsVotedFor: number | string
    ): TransactionObject<boolean>;

    vote(
      group: string,
      value: number | string,
      lesser: string,
      greater: string
    ): TransactionObject<boolean>;

    setElectabilityThreshold(
      threshold: number | string
    ): TransactionObject<boolean>;

    revokeActive(
      group: string,
      value: number | string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<boolean>;

    renounceOwnership(): TransactionObject<void>;

    revokePending(
      group: string,
      value: number | string,
      lesser: string,
      greater: string,
      index: number | string
    ): TransactionObject<boolean>;

    markGroupEligible(
      group: string,
      lesser: string,
      greater: string
    ): TransactionObject<void>;

    markGroupIneligible(group: string): TransactionObject<void>;

    setRegistry(registryAddress: string): TransactionObject<void>;

    transferOwnership(newOwner: string): TransactionObject<void>;

    setElectableValidators(
      min: number | string,
      max: number | string
    ): TransactionObject<boolean>;

    initialize(
      registryAddress: string,
      minElectableValidators: number | string,
      maxElectableValidators: number | string,
      _maxNumGroupsVotedFor: number | string,
      _electabilityThreshold: number | string
    ): TransactionObject<void>;

    distributeEpochRewards(
      group: string,
      value: number | string,
      lesser: string,
      greater: string
    ): TransactionObject<void>;

    initialized(): TransactionObject<boolean>;
    getActiveVotes(): TransactionObject<string>;
    electValidatorSigners(): TransactionObject<(string)[]>;
    getCurrentValidatorSigners(): TransactionObject<(string)[]>;
    electabilityThreshold(): TransactionObject<string>;
    registry(): TransactionObject<string>;
    numberValidatorsInCurrentSet(): TransactionObject<string>;
    owner(): TransactionObject<string>;
    isOwner(): TransactionObject<boolean>;
    getTotalVotes(): TransactionObject<string>;
    getEpochNumber(): TransactionObject<string>;
    getEligibleValidatorGroups(): TransactionObject<(string)[]>;
    maxNumGroupsVotedFor(): TransactionObject<string>;
    getElectabilityThreshold(): TransactionObject<string>;
    getEpochSize(): TransactionObject<string>;
  };
  deploy(options: {
    data: string;
    arguments: any[];
  }): TransactionObject<Contract>;
  events: {
    ElectableValidatorsSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    MaxNumGroupsVotedForSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ElectabilityThresholdSet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ValidatorGroupMarkedEligible(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ValidatorGroupMarkedIneligible(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ValidatorGroupVoteCast(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ValidatorGroupVoteActivated(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    ValidatorGroupVoteRevoked(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    RegistrySet(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    OwnershipTransferred(
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ): EventEmitter;

    allEvents: (
      options?: {
        filter?: object;
        fromBlock?: BlockType;
        topics?: (null | string)[];
      },
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
  getPastEvents(
    event: string,
    options?: {
      filter?: object;
      fromBlock?: BlockType;
      toBlock?: BlockType;
      topics?: (null | string)[];
    },
    cb?: Callback<EventLog[]>
  ): Promise<EventLog[]>;
  setProvider(provider: Provider): void;
  clone(): ElectionTest;
}

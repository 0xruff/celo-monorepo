{
	"rules": {
		"totalNonVotingGEAccountNonVoting": {
			"SUCCESS": ["registry()", "slash(address,uint256,address,uint256,address[],address[],uint256[])", "unlockingPeriod()", "getSlashingWhitelist()", "initialized()", "decrementNonvotingAccountBalance(address,uint256)", "removeSlasher(string,uint256)", "pendingWithdrawalsNotFull(address)", "withdraw(uint256)", "getTotalLockedGold()", "getAccountTotalLockedGold(address)", "addSlasher(string)", "getAccountNonvotingLockedGold(address)", "isSlasher(address)", "unlock(uint256)", "setUnlockingPeriod(uint256)", "slashingWhitelist(uint256)", "incrementNonvotingAccountBalance(address,uint256)", "renounceOwnership()", "relock(uint256,uint256)", "isOwner()", "getPendingWithdrawalsLength(address)", "getNonvotingLockedGold()", "owner()", "init_state()", "getunlockingPeriod()", "setRegistry(address)", "ercBalanceOf(address)", "getPendingWithdrawalsIndex(address,uint256)", "getGoldTokenExt()", "getTotalPendingWithdrawals(address)", "totalNonvoting()", "initialize(address,uint256)", "transferOwnership(address)", "getPendingWithdrawals(address)", "lock()", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"totalPreserved": {
			"SUCCESS": ["registry()", "slash(address,uint256,address,uint256,address[],address[],uint256[])", "unlockingPeriod()", "getSlashingWhitelist()", "initialized()", "decrementNonvotingAccountBalance(address,uint256)", "removeSlasher(string,uint256)", "pendingWithdrawalsNotFull(address)", "withdraw(uint256)", "getTotalLockedGold()", "getAccountTotalLockedGold(address)", "addSlasher(string)", "getAccountNonvotingLockedGold(address)", "isSlasher(address)", "unlock(uint256)", "setUnlockingPeriod(uint256)", "slashingWhitelist(uint256)", "incrementNonvotingAccountBalance(address,uint256)", "renounceOwnership()", "relock(uint256,uint256)", "isOwner()", "getPendingWithdrawalsLength(address)", "getNonvotingLockedGold()", "owner()", "init_state()", "getunlockingPeriod()", "setRegistry(address)", "ercBalanceOf(address)", "getPendingWithdrawalsIndex(address,uint256)", "getGoldTokenExt()", "getTotalPendingWithdrawals(address)", "totalNonvoting()", "initialize(address,uint256)", "transferOwnership(address)", "getPendingWithdrawals(address)", "lock()", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"noChangeByOther": {
			"SUCCESS": ["registry()", "slash(address,uint256,address,uint256,address[],address[],uint256[])", "unlockingPeriod()", "getSlashingWhitelist()", "initialized()", "decrementNonvotingAccountBalance(address,uint256)", "removeSlasher(string,uint256)", "pendingWithdrawalsNotFull(address)", "withdraw(uint256)", "getTotalLockedGold()", "getAccountTotalLockedGold(address)", "addSlasher(string)", "getAccountNonvotingLockedGold(address)", "isSlasher(address)", "unlock(uint256)", "setUnlockingPeriod(uint256)", "slashingWhitelist(uint256)", "incrementNonvotingAccountBalance(address,uint256)", "renounceOwnership()", "relock(uint256,uint256)", "isOwner()", "getPendingWithdrawalsLength(address)", "getNonvotingLockedGold()", "owner()", "init_state()", "getunlockingPeriod()", "setRegistry(address)", "ercBalanceOf(address)", "getPendingWithdrawalsIndex(address,uint256)", "getGoldTokenExt()", "getTotalPendingWithdrawals(address)", "totalNonvoting()", "initialize(address,uint256)", "transferOwnership(address)", "getPendingWithdrawals(address)", "lock()", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"withdraw": "SUCCESS",
		"noWithdrawBeforeUnlocking": {
			"SUCCESS": ["registry()", "slash(address,uint256,address,uint256,address[],address[],uint256[])", "unlockingPeriod()", "getSlashingWhitelist()", "initialized()", "decrementNonvotingAccountBalance(address,uint256)", "removeSlasher(string,uint256)", "pendingWithdrawalsNotFull(address)", "withdraw(uint256)", "getTotalLockedGold()", "getAccountTotalLockedGold(address)", "addSlasher(string)", "getAccountNonvotingLockedGold(address)", "isSlasher(address)", "unlock(uint256)", "setUnlockingPeriod(uint256)", "slashingWhitelist(uint256)", "incrementNonvotingAccountBalance(address,uint256)", "renounceOwnership()", "relock(uint256,uint256)", "isOwner()", "getPendingWithdrawalsLength(address)", "getNonvotingLockedGold()", "owner()", "init_state()", "getunlockingPeriod()", "setRegistry(address)", "ercBalanceOf(address)", "getPendingWithdrawalsIndex(address,uint256)", "getGoldTokenExt()", "getTotalPendingWithdrawals(address)", "totalNonvoting()", "initialize(address,uint256)", "transferOwnership(address)", "getPendingWithdrawals(address)", "lock()", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"only_initializer_changes_initialized_field": {
			"SUCCESS": ["registry()", "slash(address,uint256,address,uint256,address[],address[],uint256[])", "unlockingPeriod()", "getSlashingWhitelist()", "initialized()", "decrementNonvotingAccountBalance(address,uint256)", "removeSlasher(string,uint256)", "pendingWithdrawalsNotFull(address)", "withdraw(uint256)", "getTotalLockedGold()", "getAccountTotalLockedGold(address)", "addSlasher(string)", "getAccountNonvotingLockedGold(address)", "isSlasher(address)", "unlock(uint256)", "setUnlockingPeriod(uint256)", "slashingWhitelist(uint256)", "incrementNonvotingAccountBalance(address,uint256)", "renounceOwnership()", "relock(uint256,uint256)", "isOwner()", "getPendingWithdrawalsLength(address)", "getNonvotingLockedGold()", "owner()", "init_state()", "getunlockingPeriod()", "setRegistry(address)", "ercBalanceOf(address)", "getPendingWithdrawalsIndex(address,uint256)", "getGoldTokenExt()", "getTotalPendingWithdrawals(address)", "totalNonvoting()", "initialize(address,uint256)", "transferOwnership(address)", "getPendingWithdrawals(address)", "lock()", "certorafallback_0()"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"check_initializer": "SUCCESS",
		"envfreeFuncsAreNonpayable": {
			"SUCCESS": ["pendingWithdrawalsNotFull(address)", "getAccountNonvotingLockedGold(address)", "getPendingWithdrawalsLength(address)", "getNonvotingLockedGold()", "getunlockingPeriod()", "ercBalanceOf(address)", "getPendingWithdrawalsIndex(address,uint256)", "getGoldTokenExt()", "getTotalPendingWithdrawals(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"envfreeFuncsStaticCheck": {
			"SUCCESS": ["ercBalanceOf(address)", "getAccountNonvotingLockedGold(address)", "getGoldTokenExt()", "getNonvotingLockedGold()", "getPendingWithdrawalsIndex(address,uint256)", "getPendingWithdrawalsLength(address)", "getTotalPendingWithdrawals(address)", "getunlockingPeriod()", "pendingWithdrawalsNotFull(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		}
	},

	"assertMessages": {

	}
}
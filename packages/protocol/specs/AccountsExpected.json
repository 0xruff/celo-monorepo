{
	"rules": {
		"address_cant_be_both_authorizedby_of_two_address": {
			"SUCCESS": ["setAccountDataEncryptionKey(bytes)", "initialized()", "getWalletAddress(address)", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "getName(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "renounceOwnership()", "authorizeValidatorSigner(address,bytes,uint8,bytes32,bytes32)", "setMetadataURL(string)", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "_getValidatorSigner(address)", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "init_state()", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "getMetadataURL(address)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"address_can_authorize_two_address": {
			"SUCCESS": ["setAccountDataEncryptionKey(bytes)", "initialized()", "getWalletAddress(address)", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "getName(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "renounceOwnership()", "authorizeValidatorSigner(address,bytes,uint8,bytes32,bytes32)", "setMetadataURL(string)", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "_getValidatorSigner(address)", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "init_state()", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "getMetadataURL(address)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"authorizedBy_can_not_be_removed": {
			"SUCCESS": ["setAccountDataEncryptionKey(bytes)", "initialized()", "getWalletAddress(address)", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "getName(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "renounceOwnership()", "authorizeValidatorSigner(address,bytes,uint8,bytes32,bytes32)", "setMetadataURL(string)", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "_getValidatorSigner(address)", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "init_state()", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "getMetadataURL(address)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"account_empty_if_not_exsist_preserve": {
			"SUCCESS": ["setAccountDataEncryptionKey(bytes)", "initialized()", "getWalletAddress(address)", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "getName(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "renounceOwnership()", "authorizeValidatorSigner(address,bytes,uint8,bytes32,bytes32)", "setMetadataURL(string)", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "_getValidatorSigner(address)", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "init_state()", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "getMetadataURL(address)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"account_empty_if_not_exsist_instate": "SUCCESS",
		"address_cant_be_both_account_and_signer_preserve": {
			"SUCCESS": ["setAccountDataEncryptionKey(bytes)", "initialized()", "getWalletAddress(address)", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "getName(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "renounceOwnership()", "authorizeValidatorSigner(address,bytes,uint8,bytes32,bytes32)", "setMetadataURL(string)", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "_getValidatorSigner(address)", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "init_state()", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "getMetadataURL(address)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"address_cant_be_both_account_and_signer_instate": "SUCCESS",
		"address_signer_if_authorizedby_preserve": {
			"SUCCESS": ["setAccountDataEncryptionKey(bytes)", "initialized()", "getWalletAddress(address)", "isAccount(address)", "getVoteSigner(address)", "authorizeVoteSigner(address,uint8,bytes32,bytes32)", "isAuthorizedSigner(address)", "getValidatorSigner(address)", "getName(address)", "getAttestationSigner(address)", "validatorSignerToAccount(address)", "voteSignerToAccount(address)", "_getDataEncryptionKeyLen(address)", "renounceOwnership()", "authorizeValidatorSigner(address,bytes,uint8,bytes32,bytes32)", "setMetadataURL(string)", "authorizeAttestationSigner(address,uint8,bytes32,bytes32)", "registry()", "attestationSignerToAccount(address)", "_getValidatorSigner(address)", "batchGetMetadataURL(address[])", "owner()", "isOwner()", "signerToAccount(address)", "init_state()", "createAccount()", "_getNameLen(address)", "setAccount(string,bytes,address)", "_getVoteSigner(address)", "getMetadataURL(address)", "setRegistry(address)", "setWalletAddress(address)", "getDataEncryptionKey(address)", "_getAttestationSigner(address)", "authorizedBy(address)", "authorizeValidatorSigner(address,uint8,bytes32,bytes32)", "setName(string)", "initialize(address)", "_getAuthorizedBy(address)", "transferOwnership(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"address_signer_if_authorizedby_instate": "SUCCESS",





















		"envfreeFuncsAreNonpayable": {
			"SUCCESS": ["getWalletAddress(address)", "isAccount(address)", "_getValidatorSigner(address)", "_getVoteSigner(address)", "_getAttestationSigner(address)", "_getAuthorizedBy(address)"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		},
		"envfreeFuncsStaticCheck": {
			"SUCCESS": ["isAccount", "_getAuthorizedBy", "getWalletAddress", "_getAttestationSigner", "_getVoteSigner", "_getValidatorSigner"],
			"FAIL": [],
			"UNKNOWN": [],
			"TIMEOUT": []
		}
	},
	"assertMessages": {
	}
}